// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is SfMarketingCloudError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class SfMarketingCloudError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class SfMarketingCloudConfig (
  val appId: String,
  val accessToken: String,
  val senderId: String,
  val appEndpoint: String,
  val mid: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): SfMarketingCloudConfig {
      val appId = list[0] as String
      val accessToken = list[1] as String
      val senderId = list[2] as String
      val appEndpoint = list[3] as String
      val mid = list[4] as String
      return SfMarketingCloudConfig(appId, accessToken, senderId, appEndpoint, mid)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      appId,
      accessToken,
      senderId,
      appEndpoint,
      mid,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class SFMCUserAttribute (
  val key: String,
  val value: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): SFMCUserAttribute {
      val key = list[0] as String
      val value = list[1] as String
      return SFMCUserAttribute(key, value)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      key,
      value,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class SFMCEvent (
  val name: String,
  val params: Map<String?, Any?>? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): SFMCEvent {
      val name = list[0] as String
      val params = list[1] as Map<String?, Any?>?
      return SFMCEvent(name, params)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      name,
      params,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class SFMCConversionData (
  val id: String,
  val order: String,
  val item: String,
  val quantity: Long,
  val value: Double,
  val shipping: Double,
  val discount: Double

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): SFMCConversionData {
      val id = list[0] as String
      val order = list[1] as String
      val item = list[2] as String
      val quantity = list[3].let { if (it is Int) it.toLong() else it as Long }
      val value = list[4] as Double
      val shipping = list[5] as Double
      val discount = list[6] as Double
      return SFMCConversionData(id, order, item, quantity, value, shipping, discount)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      id,
      order,
      item,
      quantity,
      value,
      shipping,
      discount,
    )
  }
}
@Suppress("UNCHECKED_CAST")
private object SfMarketingCloudHostApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          SFMCConversionData.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          SFMCEvent.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          SFMCUserAttribute.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          SfMarketingCloudConfig.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is SFMCConversionData -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is SFMCEvent -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is SFMCUserAttribute -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is SfMarketingCloudConfig -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface SfMarketingCloudHostApi {
  fun initialize(config: SfMarketingCloudConfig)
  fun setPushToken(token: String)
  fun setContactKey(contactKey: String)
  fun trackEvent(event: SFMCEvent)
  fun setAttribute(attribute: SFMCUserAttribute)
  fun clearAttributes(attributeKeys: List<String>)
  fun setAttributes(attributes: List<SFMCUserAttribute>)
  fun addTags(tags: List<String>)
  fun removeTags(tags: List<String>)
  fun enableVerboseLogging()
  fun disableVerboseLogging()
  fun trackConversion(data: SFMCConversionData)
  fun trackPageView(path: String)

  companion object {
    /** The codec used by SfMarketingCloudHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      SfMarketingCloudHostApiCodec
    }
    /** Sets up an instance of `SfMarketingCloudHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: SfMarketingCloudHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.sf_marketing_cloud_flutter.SfMarketingCloudHostApi.initialize", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val configArg = args[0] as SfMarketingCloudConfig
            var wrapped: List<Any?>
            try {
              api.initialize(configArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.sf_marketing_cloud_flutter.SfMarketingCloudHostApi.setPushToken", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val tokenArg = args[0] as String
            var wrapped: List<Any?>
            try {
              api.setPushToken(tokenArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.sf_marketing_cloud_flutter.SfMarketingCloudHostApi.setContactKey", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val contactKeyArg = args[0] as String
            var wrapped: List<Any?>
            try {
              api.setContactKey(contactKeyArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.sf_marketing_cloud_flutter.SfMarketingCloudHostApi.trackEvent", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val eventArg = args[0] as SFMCEvent
            var wrapped: List<Any?>
            try {
              api.trackEvent(eventArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.sf_marketing_cloud_flutter.SfMarketingCloudHostApi.setAttribute", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val attributeArg = args[0] as SFMCUserAttribute
            var wrapped: List<Any?>
            try {
              api.setAttribute(attributeArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.sf_marketing_cloud_flutter.SfMarketingCloudHostApi.clearAttributes", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val attributeKeysArg = args[0] as List<String>
            var wrapped: List<Any?>
            try {
              api.clearAttributes(attributeKeysArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.sf_marketing_cloud_flutter.SfMarketingCloudHostApi.setAttributes", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val attributesArg = args[0] as List<SFMCUserAttribute>
            var wrapped: List<Any?>
            try {
              api.setAttributes(attributesArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.sf_marketing_cloud_flutter.SfMarketingCloudHostApi.addTags", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val tagsArg = args[0] as List<String>
            var wrapped: List<Any?>
            try {
              api.addTags(tagsArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.sf_marketing_cloud_flutter.SfMarketingCloudHostApi.removeTags", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val tagsArg = args[0] as List<String>
            var wrapped: List<Any?>
            try {
              api.removeTags(tagsArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.sf_marketing_cloud_flutter.SfMarketingCloudHostApi.enableVerboseLogging", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.enableVerboseLogging()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.sf_marketing_cloud_flutter.SfMarketingCloudHostApi.disableVerboseLogging", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.disableVerboseLogging()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.sf_marketing_cloud_flutter.SfMarketingCloudHostApi.trackConversion", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val dataArg = args[0] as SFMCConversionData
            var wrapped: List<Any?>
            try {
              api.trackConversion(dataArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.sf_marketing_cloud_flutter.SfMarketingCloudHostApi.trackPageView", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pathArg = args[0] as String
            var wrapped: List<Any?>
            try {
              api.trackPageView(pathArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
