// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct SfMarketingCloudConfig {
  var appId: String
  var accessToken: String
  var senderId: String
  var appEndpoint: String
  var mid: String

  static func fromList(_ list: [Any?]) -> SfMarketingCloudConfig? {
    let appId = list[0] as! String
    let accessToken = list[1] as! String
    let senderId = list[2] as! String
    let appEndpoint = list[3] as! String
    let mid = list[4] as! String

    return SfMarketingCloudConfig(
      appId: appId,
      accessToken: accessToken,
      senderId: senderId,
      appEndpoint: appEndpoint,
      mid: mid
    )
  }
  func toList() -> [Any?] {
    return [
      appId,
      accessToken,
      senderId,
      appEndpoint,
      mid,
    ]
  }
}
private class SfMarketingCloudHostApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return SfMarketingCloudConfig.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class SfMarketingCloudHostApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? SfMarketingCloudConfig {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class SfMarketingCloudHostApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return SfMarketingCloudHostApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return SfMarketingCloudHostApiCodecWriter(data: data)
  }
}

class SfMarketingCloudHostApiCodec: FlutterStandardMessageCodec {
  static let shared = SfMarketingCloudHostApiCodec(readerWriter: SfMarketingCloudHostApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol SfMarketingCloudHostApi {
  func initialize(config: SfMarketingCloudConfig) throws
  func setPushToken(token: String) throws
  func setContactKey(contactKey: String) throws
  func enableVerboseLogging() throws
  func disableVerboseLogging() throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class SfMarketingCloudHostApiSetup {
  /// The codec used by SfMarketingCloudHostApi.
  static var codec: FlutterStandardMessageCodec { SfMarketingCloudHostApiCodec.shared }
  /// Sets up an instance of `SfMarketingCloudHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: SfMarketingCloudHostApi?) {
    let initializeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.sf_marketing_cloud_flutter.SfMarketingCloudHostApi.initialize", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initializeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let configArg = args[0] as! SfMarketingCloudConfig
        do {
          try api.initialize(config: configArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      initializeChannel.setMessageHandler(nil)
    }
    let setPushTokenChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.sf_marketing_cloud_flutter.SfMarketingCloudHostApi.setPushToken", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setPushTokenChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let tokenArg = args[0] as! String
        do {
          try api.setPushToken(token: tokenArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setPushTokenChannel.setMessageHandler(nil)
    }
    let setContactKeyChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.sf_marketing_cloud_flutter.SfMarketingCloudHostApi.setContactKey", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setContactKeyChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let contactKeyArg = args[0] as! String
        do {
          try api.setContactKey(contactKey: contactKeyArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setContactKeyChannel.setMessageHandler(nil)
    }
    let enableVerboseLoggingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.sf_marketing_cloud_flutter.SfMarketingCloudHostApi.enableVerboseLogging", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      enableVerboseLoggingChannel.setMessageHandler { _, reply in
        do {
          try api.enableVerboseLogging()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      enableVerboseLoggingChannel.setMessageHandler(nil)
    }
    let disableVerboseLoggingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.sf_marketing_cloud_flutter.SfMarketingCloudHostApi.disableVerboseLogging", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      disableVerboseLoggingChannel.setMessageHandler { _, reply in
        do {
          try api.disableVerboseLogging()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      disableVerboseLoggingChannel.setMessageHandler(nil)
    }
  }
}
